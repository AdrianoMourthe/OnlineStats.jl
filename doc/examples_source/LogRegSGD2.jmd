# LogRegSGD2


```{julia; term=false; eval=true}
using OnlineStats, Distributions, StatsBase, Gadfly, DataFrames
```

### Function to help generate data
```{julia; term=false; eval=true}
inverselogit(x) = 1 / (1 + exp(-x))
@vectorize_1arg Real inverselogit
```

### Create model with the first batch
```{julia; term=false; eval=true}
β = [-.5:.1:.5]
X = [ones(100) randn(100, 10)]
y = int(inverselogit(X * β) .> rand(100))

o = LogRegSGD2(X, y, StochasticWeighting(.6))
df = DataFrame(o)  # Create DataFrame
```

### Update model with many batches
```{julia; term=false; eval=true}
for i in 1:9999
    X = [ones(100) randn(100, 10)]
    y = int(inverselogit(X * β) .> rand(100))

    updatebatch!(o, X, y)
    push!(df, o)  # append results to DataFrame
end
```

### Check fit
```{julia; term=true}
coef(o)
df_unpacked = unpack_vectors(df)
plot(df_unpacked, x = :nobs, y = :β, color = :vectorindex, Geom.line,
            yintercept = β, Geom.hline(color = "black"),
            Scale.y_continuous(minvalue=-.6, maxvalue=.6))
```
