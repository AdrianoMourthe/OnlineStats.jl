# Compare: `QuantileSGD` vs. `QuantileMM`


```{julia; term=false; eval=true}
using OnlineStats
using Gadfly
using DataFrames
```

### Create model with the first batch
```{julia; term=false; eval=true}
obj_sgd = QuantileSGD(rand(100), τ=[1:9]/10, r=.6)
obj_mm = QuantileMM(rand(100), τ=[1:9]/10, r=.6)
```

### Save results for trace plots

`make_df` constructs a `DataFrame` from any subtype of `OnlineStat`.

```{julia; term=false; eval=true}
results_sgd = make_df(obj_sgd)
results_mm = make_df(obj_mm)
```

### Update model with many batches

`make_df!(df, obj)` adds a row to `df::DataFrame` using the current state of `obj<:OnlineStat`.  This is useful for generating trace plots.

```{julia; term=false; eval=true}
srand(123)
@time for i = 1:9999
    update!(obj_sgd, rand(100))
    make_df!(results_sgd, obj_sgd)
end
```
```{julia; term=false; eval=true}
srand(123)
@time for i = 1:9999
    update!(obj_mm, rand(100))
    make_df!(results_mm, obj_mm)
end
```

### Check estimates
```{julia; term=true}
state(obj_sgd)
state(obj_mm)

# SGD: Maximum difference from truth
maxabs(obj_sgd.est - [1:9]/10)

# MM: Maximum difference from truth
maxabs(obj_mm.est - [1:9]/10)
```

### Check Traceplots
```{julia; term=false; eval=true}
results_sgd = melt(results_sgd, 10:11)
results_mm = melt(results_mm, 10:11)

plot(results_sgd, x="n", y="value", color="variable", yintercept=[1:9]/10, Geom.line, Geom.hline)
plot(results_mm, x="n", y="value", color="variable", yintercept=[1:9]/10, Geom.line, Geom.hline)
```

