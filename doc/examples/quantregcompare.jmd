# Compare: `QuantRegSGD` vs. `QuantRegMM`


```{julia; term=false; eval=true}
using OnlineStats
using Gadfly
using Distributions
using DataFrames
```

### Create model with the first batch

Specify starting value to be 0 for each coefficient.  We will see how well the models recover from poor starting values.

```{julia; term=false; eval=true}
trueBeta = [0:5]
X = randn(100, 5)
y = vec([ones(100) X] * trueBeta) + randn(100)

obj_sgd = QuantRegSGD(X, y, zeros(6) , τ=.3, r=.6)
obj_mm = QuantRegMM(X, y, zeros(6), τ=.3, r=.6)
```

### Save results for trace plots
```{julia; term=false; eval=true}
results_sgd = make_df(obj_sgd)
results_mm = make_df(obj_mm)
```

### Update model with many batches
```{julia; term=false; eval=true}
srand(123)
@time for i = 1:999
	X = randn!(X)
    y = vec([ones(100) X] * trueBeta) + randn(100)

    update!(obj_sgd, X, y)
    make_df!(results_sgd, obj_sgd)
end
```
```{julia; term=false; eval=true}
srand(123)
@time for i = 1:9999
	X = randn!(X)
    y = vec([ones(100) X] * trueBeta) + randn(100)

    update!(obj_mm, X, y)
    make_df!(results_mm, obj_mm)
end
```

### Check estimates
```{julia; term=true}
coef(obj_sgd)
coef(obj_mm)

trueBetaTau = [quantile(Normal(), .3), [1:5]]

# SGD: Maximum difference from truth
maxabs(coef(obj_sgd) - trueBetaTau)

# MM: Maximum difference from truth
maxabs(coef(obj_mm) - trueBetaTau)
```

### Check Traceplots

##### Stochastic Gradient Descent:
```{julia; term=false; eval=true}
results_sgd = melt(results_sgd, 7:8)

plot(results_sgd, x="n", y="value", color="variable", yintercept=trueBetaTau, Geom.line,
Geom.hline(color = color("black")))
```

##### Online MM Algorithm:
```{julia; term=false; eval=true}
results_mm = melt(results_mm, 7:8)

plot(results_mm, x="n", y="value", color="variable", yintercept=trueBetaTau, Geom.line,
Geom.hline(color = color("black")))
```

